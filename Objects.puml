@startuml

skinparam classAttributeIconSize 0

enum Food {
    CHICKEN("курица")
    FISH("рыба")
    SALAD("салат")
    SOUP("суп")
    --Fields--
    - final String name
    --Constructors--
    Food(String name)
    --Methods--
    + static generateRandomFood() : Food
    + toString() : String
}

abstract class Shorty {
    --Fields--
    - final String name
    - Locatable group
    - Room room
    --Constructors--
    + Shorty(String name)
    --Methods--
    + getName() : String
    + getGroup() : Locatable
    + getRoom() : Room
    + hasGroup() : boolean
    + hasRoom() : boolean
    + say(String text)
    + eat(Food food)
    + cleanRoom()
    + trashRoom()
    ~ setRoom(Room room)
    ~ setGroup(GroupOfShorties group)
    abstract spendFreeTime()
    + toString() : String
    + equals(Object o) : boolean
    + hashCode() : int
}

class Normal {
    --Constructors--
    + Normal(String name)
    --Methods--
    + spendFreeTime()
}

class Cook {
    --Constructors--
    + Cook(String name)
    --Methods--
    - cooking() : Food
    - feedOnly(Shorty shorty)
    + feedAllGroup()
    + spendFreeTime()
    + toString() : String
}

class Doctor {
    --Fields--
    + static final String BASENAME
    - static final String criterion1, criterion2
    --Constructors--
    + Doctor(String name)
    + Doctor()
    --Methods--
    + analyzeRockets(Rocket rocket1, Rocket rocket2)
    + static calculateMaxResidentsCount(Rocket rocket) : int
    + checkMess() throws InterruptedException
    + static hasMess(Room room) : boolean
    - sayBestLocation(AbleToLocate location, String reason)
    + spendFreeTime()
    + toString() : String
}

enum RoomStatus {
    CLEANEST
    CLEAN
    NORMAL
    DIRTY
    DIRTIEST
    --Methods--
    + static cleanerThan(RoomStatus status) : RoomStatus
    + static dirtierThan(RoomStatus status) : RoomStatus
}

interface Locatable {
    goTo(AbleToLocate location)
    goOut()
}

interface HasGroup {
    getGroup() : List<Shorty>
    addShorty(Shorty shorty)
    removeShorty(Shorty shorty)
}

interface HasLocation {
    getLocation() : AbleToLocate
    setLocation(AbleToLocate location)
    hasLocation() : boolean
}

class GroupOfShorties {
    --Fields--
    - List<Shorty> group
    - AbleToLocate location
    --Constructors--
    + GroupOfShorties(Shorty ... group)
    + GroupOfShorties(List<Shorty> group)
    --Methods--
    + getLocation() : AbleToLocate
    + getGroup() : List<Shorty>
    + hasLocation() : boolean
    + hasShorty(Shorty shorty) : boolean
    + addShorty(Shorty newShorty)
    + removeShorty(Shorty oldShorty)
    + disband()
    + goOut()
    + goTo(AbleToLocate location)
    + setLocation(AbleToLocate location)
    + spendFreeTime()
    + haveDinner()
    - appendShorty(Shorty shorty)
    - delShorty(Shorty shorty)
    - getCook() : Cook
    + toString() : String
    + equals(Object o) : boolean
    + hashCode() : int
}

abstract Room {
    --Fields--
    - RoomStatus status
    - final List<Shorty> residents
    - int availablePlaces
    --Constructors--
    + Room(int availablePlaces)
    --Methods--
    + getStatus() : RoomStatus
    + getResidents() : List<Shorty>
    + hasResident(Shorty resident) : boolean
    + isEmpty() : boolean
    + getMaxResidentsCount() : int
    + getAvailablePlaces() : int
    + hasAvailablePlaces() : boolean
    - setStatus(RoomStatus status)
    # cleanRoom()
    # trashRoom()
    # addResident(Shorty resident)
    # removeResident(Shorty resident)
    + toString() : String
    + equals(Object o) : boolean
    + hashCode() : int
}

class SmallRoom {
    --Fields--
    + static final int MAX_RESIDENTS
    --Constructors--
    + SmallRoom()
    --Methods--
    + toString() : String
}

class BigRoom {
    --Fields--
    + static final int MAX_RESIDENTS
    --Constructors--
    + BigRoom()
    --Methods--
    + toString() : String
}

abstract class Location {
    --Fields--
    - final String name
    - final Room[] rooms
    - int availablePlaces
    - final List<Locatable> locatedGroups
    --Constructors--
    # Location(String name, Room ... rooms)
    --Methods--
    + static calculateAvailablePlaces(Room[] rooms) : int
    + String getName() : String
    + getRooms() : Room[]
    + getRooms(Locatable group) : List<Room>
    + getAvailablePlaces() : int
    + getLocatedGroups() : List<Locatable>
    + hasLocatedGroup(Locatable group) : boolean
    + isEmpty() : boolean
    + locate(Locatable group)
    - locateResidents(List<Shorty> group)
    - addLocatedGroup(Locatable group)
    + dislocate(Locatable group)
    - dislocateResidents(List<Shorty> group)
    - removeLocatedGroup(Locatable group)
    + toString() : String
    + equals(Object o) : boolean
    + hashCode() : int
}

class Rocket{
    --Fields--
    + static final String BASENAME
    --Constructors--
    + Rocket(String name, Room ... rooms)
    + Rocket(Room ... rooms)
    --Methods--
    + toString() : String
}

interface AbleToLocate {
    locate(Locatable group)
    dislocate(Locatable group)
}

interface HasRooms {
    getRooms() : Room[]
    getRooms(Locatable group) : List<Room>
}

class FISRocket {
    --Fields--
    - static final Room[] placement
    - static final String BASENAME
    --Constructors--
    + FISRocket(String name)
    + FISRocket()
    --Methods--
    + toString() : String
}

class NIPRocket {
    --Fields--
    - static final Room[] placement
    - static final String BASENAME
    --Constructors--
    + NIPRocket(String name)
    + NIPRocket()
    --Methods--
    + toString() : String
}


Shorty -down-> Normal
Shorty -down-> Cook
Shorty -down-> Doctor
Room -down-> SmallRoom
Room -down-> BigRoom
Location -down-> Rocket
Rocket -down-> FISRocket
Rocket -down-> NIPRocket
HasGroup .down.> Locatable
HasLocation .down.> Locatable
Locatable .down.> GroupOfShorties
HasRooms .down.> AbleToLocate
AbleToLocate .down.> Location

@enduml